# X-Form Backend - Enhanced Architecture with Traefik All-in-One
# Traefik handles: Ingress + API Gateway + API Management

version: '3.8'

services:
  # ==========================================
  # TRAEFIK (All-in-One: Ingress + Gateway + Management)
  # ==========================================
  traefik:
    image: traefik:v3.0
    container_name: xform-traefik
    restart: unless-stopped
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "8080:8080"   # Traefik Dashboard
      - "8002:8002"   # WebSocket
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infrastructure/traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik-data:/data
      - traefik-logs:/var/log/traefik
    environment:
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=web"
      # Metrics
      - "traefik.http.routers.metrics.rule=Host(`traefik.localhost`) && PathPrefix(`/metrics`)"
      - "traefik.http.routers.metrics.service=prometheus@internal"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # MICROSERVICES
  # ==========================================
  
  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: xform-auth
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://xform_user:xform_password@postgres:5432/xform_auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - REDIS_URL=redis://redis:6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      # No direct exposure - routed through Traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Form Service
  form-service:
    build:
      context: ./services/form-service
      dockerfile: Dockerfile
    container_name: xform-forms
    restart: unless-stopped
    environment:
      - PORT=8001
      - DATABASE_URL=postgresql://xform_user:xform_password@postgres:5432/xform_forms
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Response Service
  response-service:
    build:
      context: ./services/response-service
      dockerfile: Dockerfile
    container_name: xform-responses
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3002
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FORM_SERVICE_URL=http://form-service:8001
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Real-time Service
  realtime-service:
    build:
      context: ./services/realtime-service
      dockerfile: Dockerfile
    container_name: xform-realtime
    restart: unless-stopped
    environment:
      - PORT=8002
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=https://app.xform.dev,http://localhost:3000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: xform-analytics
    restart: unless-stopped
    environment:
      - PORT=5001
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - BIGQUERY_PROJECT_ID=${BIGQUERY_PROJECT_ID}
      - BIGQUERY_DATASET=${BIGQUERY_DATASET}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # File Service (Optional - can be AWS Lambda)
  file-service:
    image: nginx:alpine
    container_name: xform-files
    restart: unless-stopped
    volumes:
      - file-storage:/usr/share/nginx/html
      - ./config/nginx-file-service.conf:/etc/nginx/nginx.conf:ro
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # DATABASES
  # ==========================================
  
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: xform-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=xform_main
      - POSTGRES_USER=xform_user
      - POSTGRES_PASSWORD=xform_password
      - POSTGRES_MULTIPLE_DATABASES=xform_auth,xform_forms
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - xform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xform_user -d xform_main"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: xform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - xform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # MONITORING STACK
  # ==========================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: xform-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: xform-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: xform-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger-data:/tmp
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.routers.jaeger.entrypoints=web"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

# ==========================================
# NETWORKS
# ==========================================
networks:
  xform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# VOLUMES
# ==========================================
volumes:
  # Traefik
  traefik-data:
  traefik-logs:
  
  # Databases
  postgres-data:
  redis-data:
  
  # Monitoring
  prometheus-data:
  grafana-data:
  jaeger-data:
  
  # File storage
  file-storage:
