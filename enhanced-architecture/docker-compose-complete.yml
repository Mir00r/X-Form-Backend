# Enhanced X-Form Backend - Complete Service Integration
# This Docker Compose file integrates all services with the enhanced architecture
version: '3.8'

networks:
  x-form-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:

services:
  # ==========================================
  # EDGE LAYER - Load Balancer (Traefik)
  # ==========================================
  traefik:
    image: traefik:v3.0
    container_name: x-form-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.email=admin@xform.dev"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./enhanced-architecture/edge-layer:/config:ro
      - ./certs:/letsencrypt
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # ==========================================
  # API GATEWAY - Enhanced with all features
  # ==========================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.dev
      target: development  # Use development target for hot reloading
    container_name: x-form-api-gateway
    environment:
      - ENV=development
      - PORT=8080
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_gateway
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ENCRYPTION_KEY=your-32-char-encryption-key-here!
      - RATE_LIMIT_REDIS_URL=redis://redis:6379
      - SERVICE_DISCOVERY_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
      - METRICS_ENABLED=true
      - SWAGGER_ENABLED=true
    ports:
      - "8000:8080"
      - "9090:9090"  # Metrics port
    volumes:
      - ./api-gateway:/app  # Mount entire directory for development
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.localhost`) || PathPrefix(`/api`)"
      - "traefik.http.routers.api-gateway.service=api-gateway"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8080"
      - "traefik.http.routers.api-gateway.middlewares=api-auth"
      - "traefik.http.middlewares.api-auth.forwardauth.address=http://api-gateway:8080/auth/verify"
      - "traefik.http.routers.swagger.rule=PathPrefix(`/swagger`)"
      - "traefik.http.routers.swagger.service=api-gateway"
      - "traefik.http.routers.swagger.middlewares=strip-swagger"
      - "traefik.http.middlewares.strip-swagger.stripprefix.prefixes=/swagger"

  # ==========================================
  # MICROSERVICES LAYER
  # ==========================================

  # Auth Service
  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: Dockerfile
    container_name: x-form-auth-service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_auth
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - BCRYPT_ROUNDS=12
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVICE_URL=http://localhost:3003
      - RABBITMQ_URL=amqp://rabbitmq:5672
    ports:
      - "3001:3001"
    volumes:
      - ../services/auth-service/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-service.service=auth-service"
      - "traefik.http.services.auth-service.loadbalancer.server.port=3001"

  # Form Service
  form-service:
    build:
      context: ../services/form-service
      dockerfile: Dockerfile
    container_name: x-form-form-service
    environment:
      - ENV=production
      - PORT=8001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_forms
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - ANALYTICS_SERVICE_URL=http://analytics-service:8080
    ports:
      - "8001:8001"
    volumes:
      - ../services/form-service/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - auth-service
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.form-service.rule=PathPrefix(`/forms`)"
      - "traefik.http.routers.form-service.service=form-service"
      - "traefik.http.services.form-service.loadbalancer.server.port=8001"

  # Response Service
  response-service:
    build:
      context: ../services/response-service
      dockerfile: Dockerfile
    container_name: x-form-response-service
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_responses
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MONGODB_URL=mongodb://mongodb:27017/x_form_responses
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FORM_SERVICE_URL=http://form-service:8001
      - ANALYTICS_SERVICE_URL=http://analytics-service:8080
    ports:
      - "3002:3002"
    volumes:
      - ../services/response-service/logs:/app/logs
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
      - auth-service
      - form-service
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.response-service.rule=PathPrefix(`/responses`)"
      - "traefik.http.routers.response-service.service=response-service"
      - "traefik.http.services.response-service.loadbalancer.server.port=3002"

  # Analytics Service
  analytics-service:
    build:
      context: ../services/analytics-service
      dockerfile: Dockerfile
    container_name: x-form-analytics-service
    environment:
      - ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_analytics
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MONGODB_URL=mongodb://mongodb:27017/x_form_analytics
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - CLICKHOUSE_URL=http://clickhouse:8123
    ports:
      - "8082:8080"
    volumes:
      - ../services/analytics-service/logs:/app/logs
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
      - clickhouse
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics-service.rule=PathPrefix(`/analytics`)"
      - "traefik.http.routers.analytics-service.service=analytics-service"
      - "traefik.http.services.analytics-service.loadbalancer.server.port=8080"

  # Collaboration Service
  collaboration-service:
    build:
      context: ../services/collaboration-service
      dockerfile: Dockerfile
    container_name: x-form-collaboration-service
    environment:
      - ENV=production
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=x_form_collaboration
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REALTIME_SERVICE_URL=http://realtime-service:8002
    ports:
      - "8083:8083"
    volumes:
      - ../services/collaboration-service/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - auth-service
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.collaboration-service.rule=PathPrefix(`/collaboration`)"
      - "traefik.http.routers.collaboration-service.service=collaboration-service"
      - "traefik.http.services.collaboration-service.loadbalancer.server.port=8083"

  # Realtime Service
  realtime-service:
    build:
      context: ../services/realtime-service
      dockerfile: Dockerfile
    container_name: x-form-realtime-service
    environment:
      - NODE_ENV=production
      - PORT=8002
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - WEBSOCKET_ORIGINS=http://localhost:3000,https://app.xform.dev
    ports:
      - "8002:8002"
    volumes:
      - ../services/realtime-service/logs:/app/logs
    depends_on:
      - redis
      - rabbitmq
      - auth-service
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.realtime-service.rule=PathPrefix(`/realtime`) || PathPrefix(`/ws`)"
      - "traefik.http.routers.realtime-service.service=realtime-service"
      - "traefik.http.services.realtime-service.loadbalancer.server.port=8002"

  # Event Bus Service
  event-bus-service:
    build:
      context: ../services/event-bus-service
      dockerfile: Dockerfile
    container_name: x-form-event-bus-service
    environment:
      - NODE_ENV=production
      - PORT=8004
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/x_form_events
    ports:
      - "8004:8004"
    volumes:
      - ../services/event-bus-service/logs:/app/logs
    depends_on:
      - rabbitmq
      - redis
      - mongodb
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-bus-service.rule=PathPrefix(`/events`)"
      - "traefik.http.routers.event-bus-service.service=event-bus-service"
      - "traefik.http.services.event-bus-service.loadbalancer.server.port=8004"

  # File Upload Service
  file-upload-service:
    build:
      context: ../services/file-upload-service
      dockerfile: Dockerfile
    container_name: x-form-file-upload-service
    environment:
      - NODE_ENV=production
      - PORT=8005
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=50MB
      - ALLOWED_TYPES=image/*,application/pdf,text/*
      - AUTH_SERVICE_URL=http://auth-service:3001
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    ports:
      - "8005:8005"
    volumes:
      - ../services/file-upload-service/uploads:/app/uploads
      - ../services/file-upload-service/logs:/app/logs
    depends_on:
      - auth-service
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.file-upload-service.rule=PathPrefix(`/uploads`)"
      - "traefik.http.routers.file-upload-service.service=file-upload-service"
      - "traefik.http.services.file-upload-service.loadbalancer.server.port=8005"

  # ==========================================
  # INFRASTRUCTURE LAYER
  # ==========================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: x-form-postgres
    environment:
      - POSTGRES_DB=x_form
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=x_form_auth,x_form_forms,x_form_responses,x_form_analytics,x_form_collaboration,x_form_gateway
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    networks:
      - x-form-network

  # MongoDB for document storage
  mongodb:
    image: mongo:7
    container_name: x-form-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - x-form-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: x-form-redis
    command: redis-server --appendonly yes --requirepass "redis_password"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - x-form-network

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: x-form-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - x-form-network

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: x-form-clickhouse
    environment:
      - CLICKHOUSE_DB=x_form_analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=clickhouse_password
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse-data:/var/lib/clickhouse
    networks:
      - x-form-network

  # ==========================================
  # MONITORING & OBSERVABILITY
  # ==========================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: x-form-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-data:/prometheus
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: x-form-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: x-form-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.routers.jaeger.service=jaeger"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  # ==========================================
  # DEVELOPMENT TOOLS
  # ==========================================

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: x-form-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - x-form-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.localhost`)"
      - "traefik.http.routers.adminer.service=adminer"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
