# OpenAPI 3.0.3 specification for File Upload Service
openapi: 3.0.3
info:
  title: File Upload Service API
  description: |
    Microservice for handling secure file uploads to AWS S3.
    
    ## Features
    - **Presigned S3 URLs** - Direct upload without proxy
    - **JWT Authentication** - Secure token-based auth
    - **File Validation** - Type and size validation
    - **Clean Architecture** - SOLID principles applied
    
    ## Authentication
    Use JWT Bearer tokens in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 1.0.0
  contact:
    name: File Upload Service
    email: support@x-form.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.x-form.com/file-upload
    description: Production server
  - url: https://dev-api.x-form.com/file-upload
    description: Development server
  - url: http://localhost:8000
    description: Local development server

tags:
  - name: uploads
    description: File upload operations
  - name: health
    description: Health check endpoints

paths:
  /upload:
    post:
      tags: [uploads]
      summary: Generate presigned upload URL
      description: |
        Generate a presigned URL for direct upload to S3.
        The client uses this URL to upload files directly to S3 without going through the backend.
      operationId: generateUploadUrl
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequest'
            examples:
              image_upload:
                summary: Image upload example
                value:
                  filename: "profile.jpg"
                  content_type: "image/jpeg"
                  purpose: "user_avatar"
                  expires_in_seconds: 3600
              document_upload:
                summary: Document upload example
                value:
                  filename: "contract.pdf"
                  content_type: "application/pdf"
                  purpose: "form_attachment"
                  form_id: "form-123"
                  expires_in_seconds: 7200
      responses:
        '200':
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
              examples:
                success:
                  summary: Successful response
                  value:
                    upload_id: "550e8400-e29b-41d4-a716-446655440000"
                    presigned_url: "https://bucket.s3.amazonaws.com/..."
                    s3_key: "user_avatar/user123/2024/01/15/uuid_profile.jpg"
                    expires_at: "2024-01-15T15:30:00Z"
                    upload_fields:
                      key: "user_avatar/user123/2024/01/15/uuid_profile.jpg"
                      Content-Type: "image/jpeg"
                      x-amz-meta-upload-id: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/{filename}:
    delete:
      tags: [uploads]
      summary: Delete uploaded file
      description: Delete a previously uploaded file from S3 storage
      operationId: deleteFile
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          description: Name of the file to delete
          schema:
            type: string
            example: "document.pdf"
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload/{upload_id}/status:
    get:
      tags: [uploads]
      summary: Get upload status
      description: Check the status of an upload request
      operationId: getUploadStatus
      security:
        - BearerAuth: []
      parameters:
        - name: upload_id
          in: path
          required: true
          description: Upload request ID
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Upload status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadStatusResponse'
        '404':
          description: Upload request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags: [health]
      summary: Health check
      description: Check service health status
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"

  /admin/cleanup:
    post:
      tags: [uploads]
      summary: Cleanup expired uploads
      description: |
        Admin endpoint to cleanup expired upload requests.
        This is typically called by a scheduled job.
      operationId: cleanupExpiredUploads
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cleanup completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_found:
                    type: integer
                    description: Total expired requests found
                    example: 150
                  deleted_from_storage:
                    type: integer
                    description: Files deleted from S3
                    example: 145
                  updated_in_db:
                    type: integer
                    description: Database records updated
                    example: 150
                  errors:
                    type: integer
                    description: Number of errors encountered
                    example: 5

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    UploadRequest:
      type: object
      required:
        - filename
        - content_type
      properties:
        filename:
          type: string
          minLength: 1
          maxLength: 255
          description: Original filename
          example: "document.pdf"
        content_type:
          type: string
          description: MIME type of the file
          example: "application/pdf"
        purpose:
          $ref: '#/components/schemas/UploadPurpose'
        form_id:
          type: string
          description: Associated form ID (if applicable)
          example: "form-123"
        expires_in_seconds:
          type: integer
          minimum: 300
          maximum: 86400
          default: 3600
          description: URL expiration time (5 min to 24 hours)
          example: 3600

    UploadPurpose:
      type: string
      enum:
        - form_attachment
        - user_avatar
        - document
        - image
        - temporary
      description: Purpose of the upload
      example: "form_attachment"

    UploadResponse:
      type: object
      properties:
        upload_id:
          type: string
          format: uuid
          description: Unique upload identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        presigned_url:
          type: string
          format: uri
          description: Presigned URL for upload
          example: "https://bucket.s3.amazonaws.com/..."
        s3_key:
          type: string
          description: S3 object key
          example: "form_attachment/user123/2024/01/15/uuid_document.pdf"
        expires_at:
          type: string
          format: date-time
          description: URL expiration timestamp
          example: "2024-01-15T15:30:00Z"
        upload_fields:
          type: object
          description: Additional fields required for upload
          additionalProperties: true
          example:
            key: "form_attachment/user123/2024/01/15/uuid_document.pdf"
            Content-Type: "application/pdf"

    UploadStatusResponse:
      type: object
      properties:
        upload_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        filename:
          type: string
          example: "document.pdf"
        status:
          type: string
          enum: [pending, uploaded, processing, completed, failed, deleted]
          example: "uploaded"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:00:00Z"
        expires_at:
          type: string
          format: date-time
          example: "2024-01-15T15:30:00Z"
        s3_key:
          type: string
          example: "form_attachment/user123/2024/01/15/uuid_document.pdf"

    DeletionResponse:
      type: object
      properties:
        filename:
          type: string
          example: "document.pdf"
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "File deleted successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "File type .exe is not allowed"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
          example:
            field: "filename"
            allowed_types: [".jpg", ".png", ".pdf"]
