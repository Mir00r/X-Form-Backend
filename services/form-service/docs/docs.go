// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Form Service Team",
            "email": "form-service@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/forms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of forms with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "List forms",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "draft",
                            "published",
                            "closed",
                            "archived"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in title and description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "title",
                            "response_count"
                        ],
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creator user ID",
                        "name": "createdBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Forms retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.FormSummaryDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new form with questions and settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Create a new form",
                "parameters": [
                    {
                        "description": "Form creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateFormRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Form created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ValidationErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a form with all its details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Get form by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing form's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Update form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Form update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateFormRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ValidationErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a form and all its responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Delete form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete published form",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archive a form for long-term storage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Archive form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form archived successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}/close": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close a form to stop accepting new responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Close form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form closed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Form not published",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}/duplicate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a copy of an existing form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Duplicate form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Form duplicated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}/publish": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publish a form to make it available for responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Publish form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Publish form request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.PublishFormRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form published successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Form already published",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forms/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed statistics for a form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Get form statistics",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormStatisticsDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not form owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Comprehensive health check including dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthCheckResponseDTO"
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthCheckResponseDTO"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Check if service is alive and responsive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "Service is alive",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not responsive",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Check if service is ready to accept requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get performance and usage metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitoring"
                ],
                "summary": "Get service metrics",
                "responses": {
                    "200": {
                        "description": "Metrics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.HealthMetricsDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public/forms/{id}": {
            "get": {
                "description": "Retrieve a public form that can be filled by anyone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get public form",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Form ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public form retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.FormResponseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid form ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Form not found or not public",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ConditionDTO": {
            "type": "object",
            "required": [
                "operator",
                "questionId"
            ],
            "properties": {
                "operator": {
                    "type": "string",
                    "enum": [
                        "equals",
                        "not_equals",
                        "contains",
                        "not_contains",
                        "greater_than",
                        "less_than"
                    ],
                    "example": "equals"
                },
                "questionId": {
                    "type": "string",
                    "example": "q1"
                },
                "value": {
                    "type": "string",
                    "example": "yes"
                }
            }
        },
        "dto.ConditionalLogicDTO": {
            "type": "object",
            "properties": {
                "hideIf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ConditionDTO"
                    }
                },
                "logic": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "showIf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ConditionDTO"
                    }
                }
            }
        },
        "dto.CreateFormRequestDTO": {
            "type": "object",
            "required": [
                "questions",
                "title"
            ],
            "properties": {
                "allowMultiple": {
                    "type": "boolean",
                    "example": false
                },
                "category": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "feedback"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Please provide your feedback about our service"
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "isAnonymous": {
                    "type": "boolean",
                    "example": false
                },
                "isPublic": {
                    "type": "boolean",
                    "example": true
                },
                "questions": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.CreateQuestionRequestDTO"
                    }
                },
                "settings": {
                    "$ref": "#/definitions/dto.FormSettingsDTO"
                },
                "tags": {
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "Customer Feedback Form"
                }
            }
        },
        "dto.CreateQuestionRequestDTO": {
            "type": "object",
            "required": [
                "label",
                "type"
            ],
            "properties": {
                "conditional": {
                    "$ref": "#/definitions/dto.ConditionalLogicDTO"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "Please enter your full name"
                },
                "label": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1,
                    "example": "What is your name?"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.QuestionOptionDTO"
                    }
                },
                "order": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "required": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "text",
                        "textarea",
                        "number",
                        "email",
                        "date",
                        "checkbox",
                        "radio",
                        "select",
                        "file"
                    ],
                    "example": "text"
                },
                "validation": {
                    "$ref": "#/definitions/dto.QuestionValidationDTO"
                }
            }
        },
        "dto.DependencyStatusDTO": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "lastChecked": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "responseTimeMs": {
                    "type": "integer",
                    "example": 25
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "dto.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {},
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "path": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "correlationId": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/dto.ErrorDetail"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.FormResponseDTO": {
            "type": "object",
            "properties": {
                "allowMultiple": {
                    "type": "boolean",
                    "example": false
                },
                "category": {
                    "type": "string",
                    "example": "feedback"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "createdBy": {
                    "$ref": "#/definitions/dto.UserInfoDTO"
                },
                "description": {
                    "type": "string",
                    "example": "Please provide your feedback"
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "id": {
                    "type": "string",
                    "example": "f123e4567-e89b-12d3-a456-426614174000"
                },
                "isAnonymous": {
                    "type": "boolean",
                    "example": false
                },
                "isPublic": {
                    "type": "boolean",
                    "example": true
                },
                "publishedAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.QuestionResponseDTO"
                    }
                },
                "settings": {
                    "$ref": "#/definitions/dto.FormSettingsDTO"
                },
                "statistics": {
                    "$ref": "#/definitions/dto.FormStatisticsDTO"
                },
                "status": {
                    "type": "string",
                    "example": "published"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Customer Feedback Form"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "dto.FormSettingsDTO": {
            "type": "object",
            "properties": {
                "allowDrafts": {
                    "type": "boolean",
                    "example": false
                },
                "collectEmail": {
                    "type": "boolean",
                    "example": true
                },
                "customCss": {
                    "type": "string",
                    "maxLength": 5000
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "notifyOnSubmission": {
                    "type": "boolean",
                    "example": true
                },
                "redirectUrl": {
                    "type": "string",
                    "maxLength": 500
                },
                "requireLogin": {
                    "type": "boolean",
                    "example": false
                },
                "showProgressBar": {
                    "type": "boolean",
                    "example": true
                },
                "thankYouMessage": {
                    "type": "string",
                    "maxLength": 1000
                }
            }
        },
        "dto.FormStatisticsDTO": {
            "type": "object",
            "properties": {
                "averageTimeSeconds": {
                    "type": "integer",
                    "example": 120
                },
                "completionRate": {
                    "type": "number",
                    "example": 0.85
                },
                "lastResponse": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "responseRate": {
                    "type": "number",
                    "example": 0.75
                },
                "totalResponses": {
                    "type": "integer",
                    "example": 150
                },
                "uniqueResponders": {
                    "type": "integer",
                    "example": 140
                }
            }
        },
        "dto.FormSummaryDTO": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "createdBy": {
                    "$ref": "#/definitions/dto.UserInfoDTO"
                },
                "description": {
                    "type": "string",
                    "example": "Please provide your feedback"
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "id": {
                    "type": "string",
                    "example": "f123e4567-e89b-12d3-a456-426614174000"
                },
                "isPublic": {
                    "type": "boolean",
                    "example": true
                },
                "publishedAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "statistics": {
                    "$ref": "#/definitions/dto.FormStatisticsDTO"
                },
                "status": {
                    "type": "string",
                    "example": "published"
                },
                "title": {
                    "type": "string",
                    "example": "Customer Feedback Form"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "dto.HealthCheckResponseDTO": {
            "type": "object",
            "properties": {
                "dependencies": {
                    "$ref": "#/definitions/dto.HealthDependenciesDTO"
                },
                "environment": {
                    "type": "string",
                    "example": "production"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/dto.HealthMetricsDTO"
                },
                "service": {
                    "type": "string",
                    "example": "form-service"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "uptime": {
                    "type": "string",
                    "example": "72h30m45s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "dto.HealthDependenciesDTO": {
            "type": "object",
            "properties": {
                "authService": {
                    "$ref": "#/definitions/dto.DependencyStatusDTO"
                },
                "database": {
                    "$ref": "#/definitions/dto.DependencyStatusDTO"
                },
                "emailService": {
                    "$ref": "#/definitions/dto.DependencyStatusDTO"
                },
                "storageService": {
                    "$ref": "#/definitions/dto.DependencyStatusDTO"
                }
            }
        },
        "dto.HealthMetricsDTO": {
            "type": "object",
            "properties": {
                "activeConnections": {
                    "type": "integer",
                    "example": 25
                },
                "averageResponseTimeMs": {
                    "type": "integer",
                    "example": 150
                },
                "cpuUsagePercent": {
                    "type": "number",
                    "example": 45.2
                },
                "diskUsagePercent": {
                    "type": "number",
                    "example": 35.8
                },
                "errorRate": {
                    "type": "number",
                    "example": 0.001
                },
                "memoryUsagePercent": {
                    "type": "number",
                    "example": 65.5
                },
                "requestsPerSecond": {
                    "type": "number",
                    "example": 10.5
                }
            }
        },
        "dto.PaginatedResponse": {
            "type": "object",
            "properties": {
                "correlationId": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/dto.Pagination"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.Pagination": {
            "type": "object",
            "properties": {
                "hasNext": {
                    "type": "boolean"
                },
                "hasPrev": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "dto.PublishFormRequestDTO": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Form is now live and ready for responses"
                },
                "notifySubscribers": {
                    "type": "boolean",
                    "example": false
                },
                "scheduleAt": {
                    "type": "string",
                    "example": "2024-01-15T09:00:00Z"
                }
            }
        },
        "dto.QuestionOptionDTO": {
            "type": "object",
            "required": [
                "label",
                "value"
            ],
            "properties": {
                "label": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Option 1"
                },
                "order": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 1
                },
                "value": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "option1"
                }
            }
        },
        "dto.QuestionResponseDTO": {
            "type": "object",
            "properties": {
                "conditional": {
                    "$ref": "#/definitions/dto.ConditionalLogicDTO"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Please enter your full name"
                },
                "id": {
                    "type": "string",
                    "example": "q123e4567-e89b-12d3-a456-426614174000"
                },
                "label": {
                    "type": "string",
                    "example": "What is your name?"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.QuestionOptionDTO"
                    }
                },
                "order": {
                    "type": "integer",
                    "example": 1
                },
                "required": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "example": "text"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "validation": {
                    "$ref": "#/definitions/dto.QuestionValidationDTO"
                }
            }
        },
        "dto.QuestionValidationDTO": {
            "type": "object",
            "properties": {
                "allowedTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "jpg",
                        "png",
                        "pdf"
                    ]
                },
                "maxFileSize": {
                    "type": "integer",
                    "example": 5242880
                },
                "maxLength": {
                    "type": "integer",
                    "example": 100
                },
                "maxValue": {
                    "type": "number",
                    "example": 100
                },
                "minLength": {
                    "type": "integer",
                    "example": 2
                },
                "minValue": {
                    "type": "number",
                    "example": 0
                },
                "pattern": {
                    "type": "string",
                    "example": "^[a-zA-Z ]+$"
                }
            }
        },
        "dto.SuccessResponse": {
            "type": "object",
            "properties": {
                "correlationId": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateFormRequestDTO": {
            "type": "object",
            "properties": {
                "allowMultiple": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "expiresAt": {
                    "type": "string"
                },
                "isAnonymous": {
                    "type": "boolean"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "settings": {
                    "$ref": "#/definitions/dto.FormSettingsDTO"
                },
                "tags": {
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "dto.UserInfoDTO": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "u123e4567-e89b-12d3-a456-426614174000"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "dto.ValidationErrorDTO": {
            "type": "object",
            "properties": {
                "correlationId": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/dto.ValidationErrorDetail"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.ValidationErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Input validation failed"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "path": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Form Service API",
	Description:      "Comprehensive form management service built with Clean Architecture and microservices best practices",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
