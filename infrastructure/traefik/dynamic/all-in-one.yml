# Traefik Dynamic Configuration
# API Gateway + API Management Features

http:
  # ==========================================
  # MIDDLEWARES (API Gateway & Management)
  # ==========================================
  
  middlewares:
    # -------------------- SECURITY --------------------
    
    # Security headers
    security-headers:
      headers:
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH
        accessControlAllowOriginList:
          - "https://app.xform.dev"
          - "https://admin.xform.dev"
          - "http://localhost:3000"
          - "http://localhost:3001"
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Requested-With"
          - "X-API-Key"
          - "X-User-ID"
          - "X-Trace-ID"
        accessControlExposeHeaders:
          - "X-Total-Count"
          - "X-Rate-Limit-Remaining"
          - "X-Rate-Limit-Reset"
        accessControlAllowCredentials: true
        accessControlMaxAge: 86400
        frameDeny: true
        contentTypeNosniff: true
        browserXssFilter: true
        referrerPolicy: "strict-origin-when-cross-origin"
        stsSeconds: 31536000
        stsIncludeSubdomains: true
        stsPreload: true
        customRequestHeaders:
          X-Forwarded-Proto: "https"
          X-Real-IP: ""
        customResponseHeaders:
          X-Powered-By: ""
          Server: ""
    
    # JWT Authentication (API Gateway)
    jwt-auth:
      plugin:
        jwt-auth:
          secret: "${JWT_SECRET}"
          algorithm: "HS256"
          requiredClaims:
            - "id"
            - "email"
          optionalClaims:
            - "firstName"
            - "lastName"
          headerName: "Authorization"
          headerPrefix: "Bearer "
          cookieName: "jwt-token"
          queryParamName: "token"
          forwardHeaders:
            - "X-User-ID"
            - "X-User-Email"
            - "X-User-Role"
    
    # API Key Authentication (Alternative)
    api-key-auth:
      headers:
        customRequestHeaders:
          X-API-Key-Required: "true"
    
    # -------------------- RATE LIMITING (API Management) --------------------
    
    # General API rate limiting
    rate-limit-api:
      rateLimit:
        average: 1000
        burst: 2000
        period: 1m
        sourceCriterion:
          ipStrategy:
            depth: 1
    
    # Auth endpoints (stricter)
    rate-limit-auth:
      rateLimit:
        average: 60
        burst: 100
        period: 1m
    
    # Public endpoints (form submissions)
    rate-limit-public:
      rateLimit:
        average: 500
        burst: 1000
        period: 1m
    
    # Admin endpoints (very strict)
    rate-limit-admin:
      rateLimit:
        average: 100
        burst: 200
        period: 1m
    
    # WebSocket rate limiting
    rate-limit-websocket:
      rateLimit:
        average: 50
        burst: 100
        period: 1m
    
    # Advanced rate limiting with quotas
    advanced-rate-limit:
      plugin:
        rate-limit-advanced:
          rules:
            - period: "1m"
              average: 1000
              burst: 2000
            - period: "1h" 
              average: 50000
              burst: 100000
            - period: "24h"
              average: 1000000
              burst: 2000000
          strategy: "sliding-window"
          storage: "redis"
          redisOptions:
            addr: "redis:6379"
            db: 1
    
    # -------------------- TRANSFORMATION & COMPOSITION --------------------
    
    # API versioning headers
    api-versioning:
      headers:
        customRequestHeaders:
          X-API-Version: "v1"
          X-Service-Name: ""
        customResponseHeaders:
          X-API-Version: "v1"
          X-Response-Time: ""
    
    # Request/Response transformation
    transform-request:
      headers:
        customRequestHeaders:
          X-Request-ID: ""
          X-Timestamp: ""
          X-Source: "traefik-gateway"
    
    # Response transformation
    transform-response:
      headers:
        customResponseHeaders:
          X-Response-Source: "xform-api"
          X-Cache-Status: ""
    
    # -------------------- MONITORING & ANALYTICS --------------------
    
    # Request tracing
    request-tracing:
      headers:
        customRequestHeaders:
          X-Trace-ID: ""
          X-Span-ID: ""
          X-Parent-Span-ID: ""
    
    # API analytics
    api-analytics:
      plugin:
        api-analytics:
          endpoint: "http://analytics-service:5001/api/v1/analytics/events"
          batchSize: 100
          flushInterval: "30s"
          includeHeaders:
            - "User-Agent"
            - "Referer"
            - "X-Forwarded-For"
          includeBody: false
          anonymizeIP: true
    
    # -------------------- CIRCUIT BREAKER & RETRY --------------------
    
    # Circuit breaker for resilience
    circuit-breaker:
      circuitBreaker:
        expression: "NetworkErrorRatio() > 0.30"
        checkPeriod: "10s"
        fallbackDuration: "30s"
        recoveryDuration: "30s"
    
    # Retry policy
    retry-policy:
      retry:
        attempts: 3
        initialInterval: "100ms"
    
    # -------------------- COMPRESSION & CACHING --------------------
    
    # Response compression
    compression:
      compress:
        excludedContentTypes:
          - "image/png"
          - "image/jpeg"
          - "image/gif"
          - "image/webp"
          - "video/*"
          - "audio/*"
        includedContentTypes:
          - "application/json"
          - "text/html"
          - "text/css"
          - "text/javascript"
          - "application/javascript"
          - "text/xml"
          - "application/xml"
    
    # Cache headers
    cache-headers:
      headers:
        customResponseHeaders:
          Cache-Control: "public, max-age=300"
          Vary: "Accept-Encoding"
    
    # -------------------- LOAD BALANCING --------------------
    
    # Sticky sessions (for WebSocket)
    sticky-sessions:
      headers:
        customRequestHeaders:
          X-Session-Affinity: "true"

  # ==========================================
  # ROUTERS (API Gateway Routing)
  # ==========================================
  
  routers:
    # -------------------- API ROUTES --------------------
    
    # Auth Service Routes
    auth-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/auth`)"
      service: auth-service
      middlewares:
        - security-headers
        - rate-limit-auth
        - api-versioning
        - transform-request
        - request-tracing
        - compression
      tls:
        certResolver: letsencrypt
    
    # User Profile Routes (Protected)
    user-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/user`)"
      service: auth-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-api
        - api-versioning
        - transform-request
        - request-tracing
        - compression
      tls:
        certResolver: letsencrypt
    
    # Form Service Routes (Protected)
    forms-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/forms`)"
      service: form-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-api
        - api-versioning
        - transform-request
        - request-tracing
        - circuit-breaker
        - retry-policy
        - compression
      tls:
        certResolver: letsencrypt
    
    # Public Form Submission (No Auth)
    forms-public:
      rule: "Host(`api.localhost`) && PathPrefix(`/forms/`) && Method(`POST`, `GET`)"
      service: response-service
      middlewares:
        - security-headers
        - rate-limit-public
        - api-versioning
        - transform-request
        - request-tracing
        - compression
      tls:
        certResolver: letsencrypt
    
    # Response Service Routes (Protected)
    responses-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/responses`)"
      service: response-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-api
        - api-versioning
        - transform-request
        - request-tracing
        - compression
      tls:
        certResolver: letsencrypt
    
    # Analytics Service Routes (Protected)
    analytics-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/analytics`)"
      service: analytics-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-api
        - api-versioning
        - transform-request
        - request-tracing
        - cache-headers
        - compression
      tls:
        certResolver: letsencrypt
    
    # File Service Routes (Protected)
    files-api:
      rule: "Host(`api.localhost`) && PathPrefix(`/api/v1/files`)"
      service: file-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-api
        - api-versioning
        - transform-request
        - request-tracing
      tls:
        certResolver: letsencrypt
    
    # -------------------- WEBSOCKET ROUTES --------------------
    
    # Real-time WebSocket (Direct routing)
    realtime-websocket:
      rule: "Host(`ws.localhost`) || (Host(`api.localhost`) && Headers(`Upgrade`, `websocket`))"
      service: realtime-service
      middlewares:
        - security-headers
        - rate-limit-websocket
        - transform-request
        - request-tracing
        - sticky-sessions
      tls:
        certResolver: letsencrypt
    
    # -------------------- ADMIN ROUTES --------------------
    
    # Admin API (Super strict)
    admin-api:
      rule: "Host(`admin.localhost`) && PathPrefix(`/api/v1/admin`)"
      service: auth-service
      middlewares:
        - security-headers
        - jwt-auth
        - rate-limit-admin
        - api-versioning
        - transform-request
        - request-tracing
        - compression
      tls:
        certResolver: letsencrypt
    
    # -------------------- HEALTH & MONITORING --------------------
    
    # Health checks (No auth)
    health-check:
      rule: "PathPrefix(`/health`) || PathPrefix(`/ping`)"
      service: health-service
      middlewares:
        - security-headers
        - compression
    
    # Metrics endpoint
    metrics:
      rule: "Host(`metrics.localhost`) && PathPrefix(`/metrics`)"
      service: prometheus
      middlewares:
        - security-headers
        - rate-limit-admin

  # ==========================================
  # SERVICES (Backend Service Discovery)
  # ==========================================
  
  services:
    # Microservices
    auth-service:
      loadBalancer:
        servers:
          - url: "http://auth-service:3001"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
        sticky:
          cookie:
            name: "auth-session"
    
    form-service:
      loadBalancer:
        servers:
          - url: "http://form-service:8001"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
    
    response-service:
      loadBalancer:
        servers:
          - url: "http://response-service:3002"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
    
    realtime-service:
      loadBalancer:
        servers:
          - url: "http://realtime-service:8002"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
    
    analytics-service:
      loadBalancer:
        servers:
          - url: "http://analytics-service:5001"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
    
    file-service:
      loadBalancer:
        servers:
          - url: "http://file-service:9001"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
    
    # Monitoring services
    prometheus:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"
    
    # Health service (virtual)
    health-service:
      loadBalancer:
        servers:
          - url: "http://auth-service:3001"  # Fallback to auth service

# ==========================================
# TCP (WebSocket Support)
# ==========================================

tcp:
  routers:
    websocket-tcp:
      rule: "HostSNI(`ws.localhost`)"
      service: realtime-tcp
      tls:
        passthrough: false
        certResolver: letsencrypt
  
  services:
    realtime-tcp:
      loadBalancer:
        servers:
          - address: "realtime-service:8002"

# ==========================================
# TLS CONFIGURATION
# ==========================================

tls:
  options:
    default:
      sslProtocols:
        - "TLSv1.2"
        - "TLSv1.3"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
      curvePreferences:
        - CurveP521
        - CurveP384
      minVersion: "VersionTLS12"
