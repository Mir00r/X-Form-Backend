version: '3.8'

services:
  # Traefik Proxy (Entry Point)
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infrastructure/traefik/dynamic.yml:/etc/traefik/dynamic/dynamic.yml:ro
      - traefik-certs:/data
      - traefik-logs:/var/log/traefik
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.service=api@internal"
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_DEBUG=true

  # Kong API Management
  kong-database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-postgres-data:/var/lib/postgresql/data
    networks:
      - xform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 5

  kong-migrations:
    image: kong:3.4
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    networks:
      - xform-network

  kong:
    image: kong:3.4
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PLUGINS: bundled,prometheus
    ports:
      - "8000:8000"  # Kong proxy
      - "8001:8001"  # Kong admin API
      - "8002:8002"  # Kong admin GUI
    depends_on:
      - kong-database
      - kong-migrations
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kong-admin.rule=Host(`kong.localhost`)"
      - "traefik.http.routers.kong-admin.entrypoints=web"
      - "traefik.http.routers.kong-admin.service=kong-admin"
      - "traefik.http.services.kong-admin.loadbalancer.server.port=8002"
    volumes:
      - ./infrastructure/kong/kong.yml:/opt/kong/kong.yml:ro

  # API Gateway (Custom Go Service)
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    environment:
      - PORT=8080
      - METRICS_PORT=9090
      - ENVIRONMENT=development
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FORM_SERVICE_URL=http://form-service:8001
      - RESPONSE_SERVICE_URL=http://response-service:3002
      - ANALYTICS_SERVICE_URL=http://analytics-service:5001
      - REALTIME_SERVICE_URL=http://realtime-service:8002
      - REDIS_URL=redis://redis:6379
      - KONG_ADMIN_URL=http://kong:8001
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics
    depends_on:
      - redis
      - kong
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api-gateway.entrypoints=web"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8080"
      - "traefik.http.routers.api-gateway.middlewares=api-rate-limit,api-cors"
      - "traefik.http.middlewares.api-rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.api-rate-limit.ratelimit.burst=200"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=http://localhost:3000"

  # PostgreSQL for users and forms
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: xform_db
      POSTGRES_USER: xform_user
      POSTGRES_PASSWORD: xform_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - xform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xform_user -d xform_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for real-time features and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Service (Node.js)
  auth-service:
    build:
      context: ./apps/auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://xform_user:xform_password@postgres:5432/xform_db
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    volumes:
      - ./services/auth-service:/app
    networks:
      - xform-network
    labels:
      - "traefik.enable=false"  # Traffic goes through API Gateway

  # Form Service (Go)
  form-service:
    build:
      context: ./apps/form-service
      dockerfile: Dockerfile
    environment:
      - PORT=8001
      - DATABASE_URL=postgresql://xform_user:xform_password@postgres:5432/xform_db
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/form-service:/app
    networks:
      - xform-network
    labels:
      - "traefik.enable=false"  # Traffic goes through API Gateway

  # Real-time Service (Go) - Direct WebSocket access
  realtime-service:
    build:
      context: ./apps/realtime-service
      dockerfile: Dockerfile
    environment:
      - PORT=8002
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8002:8002"
    depends_on:
      - redis
    volumes:
      - ./services/realtime-service:/app
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.realtime.rule=Host(`ws.localhost`) || (Host(`api.localhost`) && PathPrefix(`/ws/`))"
      - "traefik.http.routers.realtime.entrypoints=web"
      - "traefik.http.services.realtime.loadbalancer.server.port=8002"

  # Response Service (Node.js)
  response-service:
    build:
      context: ./apps/response-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3002
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3002:3002"
    volumes:
      - ./services/response-service:/app
    networks:
      - xform-network
    labels:
      - "traefik.enable=false"  # Traffic goes through API Gateway

  # Analytics Service (Python)
  analytics-service:
    build:
      context: ./apps/analytics-service
      dockerfile: Dockerfile
    environment:
      - PORT=5001
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - BIGQUERY_PROJECT_ID=${BIGQUERY_PROJECT_ID}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "5001:5001"
    volumes:
      - ./services/analytics-service:/app
    networks:
      - xform-network
    labels:
      - "traefik.enable=false"  # Traffic goes through API Gateway

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - xform-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.localhost`)"
      - "traefik.http.routers.jaeger.entrypoints=web"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

volumes:
  postgres_data:
  redis_data:
  kong-postgres-data:
  traefik-certs:
  traefik-logs:
  prometheus_data:
  grafana_data:

networks:
  xform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
